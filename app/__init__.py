# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Django settings for base_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import io
import os
import json
import environ
import structlog

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env_file = os.path.join(BASE_DIR, ".env")

def boolify(string_bool):
    if string_bool in ["True", True]:
        return True
    elif string_bool in ["False", False]:
        return False
    else:
        return None


env = environ.Env()

# Create local settings if running with CI, for unit testing
if os.environ.get("TRAMPOLINE_CI", None):
    placeholder = f"SECRET_KEY=a\nGS_BUCKET_NAME=none\nDATABASE_URL=sqlite://{os.path.join(BASE_DIR, 'db.sqlite3')}"
    env.read_env(io.StringIO(placeholder))

# Do not get secret env if "GET_SECRET_ENV=False"
if boolify(os.environ.get("GET_SECRET_ENV", True)):
    # [START cloudrun_django_secretconfig]
    import google.auth
    from google.cloud import secretmanager

    _, project = google.auth.default()

    if project:
        client = secretmanager.SecretManagerServiceClient()

        SETTINGS_NAME = os.environ.get("SETTINGS_NAME", "django_settings")
        name = f"projects/{project}/secrets/{SETTINGS_NAME}/versions/latest"
        payload = client.access_secret_version(name=name).payload.data.decode(
            "UTF-8"
        )
    env.read_env(io.StringIO(payload))
    # [END cloudrun_django_secretconfig]


SECRET_KEY = env("SECRET_KEY")

ALLOWED_HOSTS = env("ALLOWED_HOSTS")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # "django.contrib.sites",
    "mysite",
    "BaseUser",
    "AppUser",
    "storages",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
    # 'rest_framework.permissions.IsAuthenticated',
    'rest_framework.permissions.AllowAny',
]
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
CORS_ORIGIN_ALLOW_ALL = boolify(env("CORS_ORIGIN_ALLOW_ALL"))
WSGI_APPLICATION = "mysite.wsgi.application"

AUTH_USER_MODEL='BaseUser.BaseUser'

# [START cloudrun_django_dbconfig]
# Use django-environ to parse the connection string
DATABASES = {"default": env.db()}
# [END cloudrun_django_dbconfig]

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator", },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]


struc_logs = boolify(os.environ.get("STRUCTURED_LOGS", True))
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
            "foreign_pre_chain": [
                structlog.contextvars.merge_contextvars, # <---- add this
                # customize the rest as you need
                structlog.processors.TimeStamper(fmt="iso"),
                structlog.stdlib.add_logger_name,
                structlog.stdlib.add_log_level,
                structlog.stdlib.PositionalArgumentsFormatter(),
            ],
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.KeyValueRenderer(key_order=['level', 'event']),
        },
    },
    "handlers": {
        "console": {
            'level': 'INFO',
            "class": "logging.StreamHandler",
            "formatter": "json_formatter" if struc_logs else "plain_console",
        },
    },
    "loggers": {
        "django_structlog": {
            "handlers": ["console"],
            "level": "INFO",
        },
        # Make sure to replace the following logger's name for yours
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
    }
}

structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)



# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"
DEBUG = boolify(env("DEBUG"))

USE_I18N = True

USE_L10N = True

USE_TZ = True

#Everything should be coming from localhost because this is a containerized application.
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080', #Could make port dynamic to pick up on cloud run port.
]

# [START cloudrun_django_staticconfig]
# Define static storage via django-storages[google]
if os.getenv("GS_BUCKET_NAME", None) and boolify(env("USE_GCS")):
    # only serve static assets when bucket is provided
    INSTALLED_APPS.append("django.contrib.staticfiles")
    GS_BUCKET_NAME = env("GS_BUCKET_NAME")

    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    GS_DEFAULT_ACL = "publicRead" #This would have to change for app hosted behind IAP
else:
    INSTALLED_APPS.append("django.contrib.staticfiles")
    STATIC_URL = '/static/'

# [END cloudrun_django_staticconfig]